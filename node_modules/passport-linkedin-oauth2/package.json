{
  "_args": [
    [
      {
        "raw": "passport-linkedin-oauth2@^1.4.1",
        "scope": null,
        "escapedName": "passport-linkedin-oauth2",
        "name": "passport-linkedin-oauth2",
        "rawSpec": "^1.4.1",
        "spec": ">=1.4.1 <2.0.0",
        "type": "range"
      },
      "/Users/claudius/Documents/workspace/_WEBAPPS/imagetagging/hackathon-starter"
    ]
  ],
  "_from": "passport-linkedin-oauth2@>=1.4.1 <2.0.0",
  "_id": "passport-linkedin-oauth2@1.5.0",
  "_inCache": true,
  "_location": "/passport-linkedin-oauth2",
  "_nodeVersion": "4.2.3",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/passport-linkedin-oauth2-1.5.0.tgz_1487600948018_0.09324386948719621"
  },
  "_npmUser": {
    "name": "iaco",
    "email": "sebastian.iacomuzzi@gmail.com"
  },
  "_npmVersion": "2.14.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "passport-linkedin-oauth2@^1.4.1",
    "scope": null,
    "escapedName": "passport-linkedin-oauth2",
    "name": "passport-linkedin-oauth2",
    "rawSpec": "^1.4.1",
    "spec": ">=1.4.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/passport-linkedin-oauth2/-/passport-linkedin-oauth2-1.5.0.tgz",
  "_shasum": "06640b36a6f68299fedb8a6a3acfef4dd04d23b9",
  "_shrinkwrap": null,
  "_spec": "passport-linkedin-oauth2@^1.4.1",
  "_where": "/Users/claudius/Documents/workspace/_WEBAPPS/imagetagging/hackathon-starter",
  "author": {
    "name": "Auth0"
  },
  "bugs": {
    "url": "https://github.com/auth0/passport-linkedin-oauth2/issues"
  },
  "contributors": [
    {
      "name": "Eugenio Pace",
      "email": "eugenio.pace@qraftlabs.com"
    },
    {
      "name": "Joshua Schell",
      "email": "jschell12@gmail.com"
    },
    {
      "name": "Jose Romaniello",
      "email": "jfromaniello@gmail.com"
    },
    {
      "name": "Tom Spencer",
      "email": "fiznool@gmail.com"
    }
  ],
  "dependencies": {
    "passport-oauth2": "1.x.x",
    "underscore": "^1.7.0"
  },
  "description": "Passport for LinkedIn Oauth2",
  "devDependencies": {
    "ejs": "~0.8.4",
    "express": "~3.4.4",
    "mocha": "*",
    "passport": "~0.1.17",
    "should": "~1.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "06640b36a6f68299fedb8a6a3acfef4dd04d23b9",
    "tarball": "https://registry.npmjs.org/passport-linkedin-oauth2/-/passport-linkedin-oauth2-1.5.0.tgz"
  },
  "gitHead": "72ede870de222593c24eb19c22a9bf9984363598",
  "homepage": "https://github.com/auth0/passport-linkedin-oauth2#readme",
  "keywords": [
    "passport",
    "linkedin",
    "auth0"
  ],
  "license": "MIT",
  "main": "./lib",
  "maintainers": [
    {
      "name": "jfromaniello",
      "email": "jfromaniello@gmail.com"
    },
    {
      "name": "iaco",
      "email": "sebastian.iacomuzzi@gmail.com"
    }
  ],
  "name": "passport-linkedin-oauth2",
  "optionalDependencies": {},
  "readme": "A simple [Passport](http://passportjs.org/) strategy for LinkedIn OAuth2.\n\n## Install\n\n  npm install passport-linkedin-oauth2\n\n## Usage\n\nRegister the strategy\n\n~~~javascript\nvar LinkedInStrategy = require('passport-linkedin-oauth2').Strategy;\n\npassport.use(new LinkedInStrategy({\n  clientID: LINKEDIN_KEY,\n  clientSecret: LINKEDIN_SECRET,\n  callbackURL: \"http://127.0.0.1:3000/auth/linkedin/callback\",\n  scope: ['r_emailaddress', 'r_basicprofile'],\n}, function(accessToken, refreshToken, profile, done) {\n  // asynchronous verification, for effect...\n  process.nextTick(function () {\n    // To keep the example simple, the user's LinkedIn profile is returned to\n    // represent the logged-in user. In a typical application, you would want\n    // to associate the LinkedIn account with a user record in your database,\n    // and return that user instead.\n    return done(null, profile);\n  });\n}));\n~~~\n\nand then authenticate as:\n\n~~~javascript\napp.get('/auth/linkedin',\n  passport.authenticate('linkedin', { state: 'SOME STATE'  }),\n  function(req, res){\n    // The request will be redirected to LinkedIn for authentication, so this\n    // function will not be called.\n  });\n~~~\n\nthe login callback:\n\n~~~javascript\napp.get('/auth/linkedin/callback', passport.authenticate('linkedin', {\n  successRedirect: '/',\n  failureRedirect: '/login'\n}));\n~~~\n\nSee [this](http://developer.linkedin.com/) for details on LinkedIn API.\n\n## Auto-handle `state` param\n\nThe `state` param is used to prevent CSRF attacks, and is [required by the LinkedIn API](https://developer.linkedin.com/documents/authentication). You can ask Passport to handle the sending and validating of the `state` parameter by passing `state: true` as an option to the strategy:\n\n~~~javascript\nvar LinkedInStrategy = require('passport-linkedin-oauth2').Strategy;\n\npassport.use(new LinkedInStrategy({\n  clientID: LINKEDIN_KEY,\n  clientSecret: LINKEDIN_SECRET,\n  callbackURL: \"http://127.0.0.1:3000/auth/linkedin/callback\",\n  scope: ['r_emailaddress', 'r_basicprofile'],\n  state: true\n}, function(accessToken, refreshToken, profile, done) {\n  // asynchronous verification, for effect...\n  process.nextTick(function () {\n    // To keep the example simple, the user's LinkedIn profile is returned to\n    // represent the logged-in user. In a typical application, you would want\n    // to associate the LinkedIn account with a user record in your database,\n    // and return that user instead.\n    return done(null, profile);\n  });\n}));\n~~~\n\nand then authenticate as:\n\n~~~javascript\napp.get('/auth/linkedin',\n  passport.authenticate('linkedin'),\n  function(req, res){\n    // The request will be redirected to LinkedIn for authentication, so this\n    // function will not be called.\n  });\n~~~\n\n## Issue Reporting\n\nIf you have found a bug or if you have a feature request, please report them at this repository issues section. Please do not report security vulnerabilities on the public GitHub issue tracker. The [Responsible Disclosure Program](https://auth0.com/whitehat) details the procedure for disclosing security issues.\n\n## Author\n\n[Auth0](auth0.com)\n\n## License\n\nThis project is licensed under the MIT license. See the [LICENSE](LICENSE) file for more info.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/auth0/passport-linkedin-oauth2.git"
  },
  "scripts": {
    "test": "mocha --require should -t 5000"
  },
  "version": "1.5.0"
}
