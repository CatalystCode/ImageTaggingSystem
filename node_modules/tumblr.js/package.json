{
  "_args": [
    [
      {
        "raw": "tumblr.js@^1.1.1",
        "scope": null,
        "escapedName": "tumblr.js",
        "name": "tumblr.js",
        "rawSpec": "^1.1.1",
        "spec": ">=1.1.1 <2.0.0",
        "type": "range"
      },
      "/Users/claudius/Documents/workspace/_WEBAPPS/imagetagging/hackathon-starter"
    ]
  ],
  "_from": "tumblr.js@>=1.1.1 <2.0.0",
  "_id": "tumblr.js@1.1.1",
  "_inCache": true,
  "_location": "/tumblr.js",
  "_nodeVersion": "4.1.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/tumblr.js-1.1.1.tgz_1469485861989_0.5692441728897393"
  },
  "_npmUser": {
    "name": "kmck",
    "email": "keith@mcknig.ht"
  },
  "_npmVersion": "2.14.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tumblr.js@^1.1.1",
    "scope": null,
    "escapedName": "tumblr.js",
    "name": "tumblr.js",
    "rawSpec": "^1.1.1",
    "spec": ">=1.1.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/tumblr.js/-/tumblr.js-1.1.1.tgz",
  "_shasum": "a72423e7a08781952d2a45fe4fa35ed15f225c6d",
  "_shrinkwrap": null,
  "_spec": "tumblr.js@^1.1.1",
  "_where": "/Users/claudius/Documents/workspace/_WEBAPPS/imagetagging/hackathon-starter",
  "author": {
    "name": "Tumblr"
  },
  "bugs": {
    "url": "https://github.com/tumblr/tumblr.js/issues"
  },
  "contributors": [
    {
      "name": "Keith McKnight",
      "email": "keith@mcknig.ht"
    },
    {
      "name": "Bryan Irace",
      "email": "bryan.irace@gmail.com"
    },
    {
      "name": "John Crepezzi",
      "email": "john.crepezzi@gmail.com"
    }
  ],
  "dependencies": {
    "lodash": "^4.14.0",
    "query-string": "^4.2.2",
    "request": "^2.74.0"
  },
  "description": "Official JavaScript client for the Tumblr API",
  "devDependencies": {
    "chai": "^3.5.0",
    "gulp": "^3.9.1",
    "gulp-eslint": "^3.0.1",
    "gulp-istanbul": "^1.0.0",
    "gulp-mocha": "^2.2.0",
    "hotdoc": "^0.7.1",
    "jsdoc": "^3.4.0",
    "json5": "^0.5.0",
    "nock": "^8.0.0",
    "semver": "^5.3.0"
  },
  "directories": {},
  "dist": {
    "shasum": "a72423e7a08781952d2a45fe4fa35ed15f225c6d",
    "tarball": "https://registry.npmjs.org/tumblr.js/-/tumblr.js-1.1.1.tgz"
  },
  "engines": {
    "node": ">=0.12.0"
  },
  "files": [
    "/lib",
    "/LICENSE"
  ],
  "gitHead": "47679a7ab5b17b21bc12d5440d4f5375f0c4d43b",
  "homepage": "https://github.com/tumblr/tumblr.js",
  "keywords": [
    "tumblr",
    "api"
  ],
  "license": "Apache-2.0",
  "main": "./lib/tumblr",
  "maintainers": [
    {
      "name": "seejohnrun",
      "email": "john.crepezzi@gmail.com"
    },
    {
      "name": "kmck",
      "email": "keith@mcknig.ht"
    },
    {
      "name": "tumblr",
      "email": "accounts@tumblr.com"
    },
    {
      "name": "johnnybenson",
      "email": "johnnybenson@gmail.com"
    }
  ],
  "name": "tumblr.js",
  "optionalDependencies": {},
  "readme": "# tumblr.js\n\n[![Build Status](https://travis-ci.org/tumblr/tumblr.js.svg?branch=master)](https://travis-ci.org/tumblr/tumblr.js)\n\nThe official JavaScript client library for the [Tumblr API](http://www.tumblr.com/docs/api/v2). Check out the [detailed documentation here](https://tumblr.github.io/tumblr.js/index.html).\n\n## Installation\n\nInstall this package from [npm](https://www.npmjs.com/package/tumblr.js):\n\n```bash\nnpm install --save tumblr.js\n```\n\n## Usage\n\n### Authentication\n\nDifferent API methods use different kinds of authentication.\n\nMost of them require at least an API key, which will require you to [register an application](https://www.tumblr.com/oauth/apps). The **OAuth Consumer Key** is your API key.\n\nFor methods that require a fully signed request, you'll need OAuth tokens as well, which you get from authenticating as a Tumblr user and allowing access to your API application. Here's the easy way to do it with our own account:\n\n1. Visit the [OAuth applications page](https://www.tumblr.com/oauth/apps)\n2. Click \"Explore API\" on the application you want to authorize\n3. Click the \"Allow\" button, which will take you to the [API console](https://api.tumblr.com/console)\n4. Click the \"Show keys\" button, which will show you the credentials you can use to make signed requests.\n\nIf you're building an application of your own for users out in the world, you'll need to go through the 3-legged OAuth flow. See the [help docs](https://www.tumblr.com/docs/api/v2#auth) for more info.\n\n### In Node.js\n\n```js\nvar tumblr = require('tumblr.js');\nvar client = tumblr.createClient({\n  consumer_key: '<consumer key>',\n  consumer_secret: '<consumer secret>',\n  token: '<oauth token>',\n  token_secret: '<oauth token secret>'\n});\n```\n\nOr, if you prefer:\n\n```js\nvar tumblr = require('tumblr.js');\nvar client = new tumblr.Client({\n  // ...\n});\n```\n\nThe request methods return `Request` objects by default, but you can have it return `Promise` objects instead, if that's more your thing. Pass `returnPromises: true` in the options to `createClient`:\n\n```js\nvar tumblr = require('tumblr.js');\nvar client = tumblr.createClient({\n  credentials: {\n    // ...\n  },\n  returnPromises: true,\n});\n```\n\n### In the Browser\n\nDue to CORS restrictions, you're going to have a really hard time using this library in the browser. Although GET endpoints on the Tumblr API support JSONP, this library is not intended for in-browser use. Sorry!\n\n## Example\n\n```js\n// Show user's blog names\nclient.userInfo(function(err, data) {\n  data.user.blogs.forEach(function(blog) {\n    console.log(blog.name);\n  });\n});\n```\n\n## Supported Methods\n\nBelow is a list of available methods and their purpose. Available options are documented in the [API Docs](https://www.tumblr.com/docs/api/v2) and are specified as a JavaScript object.\n\n```js\nclient.blogPosts('staff', {type: 'photo'}, function(err, resp) {\n  resp.posts; // use them for something\n});\n```\n\nIn most cases, since options are optional (heh) they are also an optional argument, so there is no need to pass an empty object when supplying no options, like:\n\n```js\nclient.blogPosts('staff', function(err, resp) {\n  resp.posts; // now we've got all kinds of posts\n});\n```\n\nIf you're using Promises, use `then` and/or `catch` instead of a callback:\n\n```js\nclient.blogPosts('staff')\n  .then(function(resp) {\n    resp.posts;\n  })\n  .catch(function(err) {\n    // oops\n  });\n```\n\n### User Methods\n\n```js\n// Get information about the authenticating user & their blogs\nclient.userInfo(callback);\n\n// Get dashboard for authenticating user\nclient.userDashboard(options, callback);\nclient.userDashboard(callback);\n\n// Get likes for authenticating user\nclient.userLikes(options, callback);\nclient.userLikes(callback);\n\n// Get followings for authenticating user\nclient.userFollowing(options, callback);\nclient.userFollowing(callback);\n\n// Follow or unfollow a given blog\nclient.followBlog(blogURL, callback);\nclient.unfollowBlog(blogURL, callback);\n\n// Like or unlike a given post\nclient.likePost(id, reblogKey, callback);\nclient.unlikePost(id, reblogKey, callback);\n```\n\n### Blog Methods\n\n```js\n// Get information about a given blog\nclient.blogInfo(blogName, callback);\n\n// Get a list of posts for a blog (with optional filtering)\nclient.blogPosts(blogName, options, callback);\nclient.blogPosts(blogName, callback);\n\n// Get the avatar URL for a blog\nclient.blogAvatar(blogName, size, callback);\nclient.blogAvatar(blogName, callback);\n\n// Get the likes for a blog\nclient.blogLikes(blogName, options, callback);\nclient.blogLikes(blogName, callback);\n\n// Get the followers for a blog\nclient.blogFollowers(blogName, options, callback);\nclient.blogFollowers(blogName, callback);\n\n// Get the queue for a blog\nclient.blogQueue(blogName, options, callback);\nclient.blogQueue(blogName, callback);\n\n// Get the drafts for a blog\nclient.blogDrafts(blogName, options, callback);\nclient.blogDrafts(blogName, callback);\n\n// Get the submissions for a blog\nclient.blogSubmissions(blogName, options, callback);\nclient.blogSubmissions(blogName, callback);\n```\n\n### Post Methods\n\n```js\n// Edit a given post\nclient.editPost(blogName, options, callback);\n\n// Reblog a given post\nclient.reblogPost(blogName, options, callback);\n\n// Delete a given post\nclient.deletePost(blogName, id, callback);\n\n// Convenience methods for creating post types\nclient.createTextPost(blogName, options, callback);\nclient.createPhotoPost(blogName, options, callback);\nclient.createQuotePost(blogName, options, callback);\nclient.createLinkPost(blogName, options, callback);\nclient.createChatPost(blogName, options, callback);\nclient.createAudioPost(blogName, options, callback);\nclient.createVideoPost(blogName, options, callback);\n```\n\n### Tagged Methods\n\n```js\n// View posts tagged with a certain tag\nclient.taggedPosts(tag, options, callback);\nclient.taggedPosts(tag, callback);\n```\n\n## Unsupported Methods\n\nYou can make GET and POST requests to any endpoint directly. These methods are used internally by the methods listed above:\n\n```js\n// GET requests\nclient.getRequest(apiPath, params, callback);\n\n// POST requests\nclient.postRequest(apiPath, params, callback);\n```\n\nIn the unlikely event that we add a bunch of methods to the API docs and don't update this client, you can map new client methods to API endpoints. URL and query parameters are automatically turned into arguments to these methods. It's a little weird to explain, so just look at these examples:\n\n```js\n// GET methods\nclient.addGetMethods({\n  // creates client.userInfo(params, callback)\n  userInfo: '/user/info',\n  // client.blogInfo(blogIdentifier, params, callback)\n  blogInfo: '/blog/:blogIdentifier/info',\n  // Creates client.taggedPosts(tag, params, callback)\n  taggedPosts: ['/tagged', ['tag']],\n});\n\n// POST methods\nclient.addPostMethods({\n  // client.deletePost(blogIdentifier, id, params, callback)\n  deletePost: ['/blog/:blogIdentifier/post/delete', ['id']],\n  // Creates client.likePost(tag, id, reblog_key, params, callback)\n  likePost: ['/user/like', ['id', 'reblog_key']],\n});\n```\n\n---\n\n## Running Tests\n\n```bash\nnpm test # linter and tests\ngulp lint # linter\ngulp test # just the tests\n```\n\n---\n\n## Copyright and license\n\nCopyright 2013-2016 Tumblr, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not\nuse this work except in compliance with the License. You may obtain a copy of\nthe License in the [LICENSE](LICENSE) file, or at:\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\nLicense for the specific language governing permissions and limitations.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tumblr/tumblr.js.git"
  },
  "scripts": {
    "generate-docs": "rm -rf gh-pages && node_modules/.bin/jsdoc -c jsdoc.json",
    "gh-pages": "git subtree push --prefix=gh-pages origin gh-pages",
    "test": "gulp"
  },
  "version": "1.1.1"
}
